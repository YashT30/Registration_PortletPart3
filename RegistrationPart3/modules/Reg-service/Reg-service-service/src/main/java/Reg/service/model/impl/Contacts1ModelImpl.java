/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package Reg.service.model.impl;

import Reg.service.model.Contacts1;
import Reg.service.model.Contacts1Model;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Contacts1 service. Represents a row in the &quot;Yash_Contacts1&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Contacts1Model</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Contacts1Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Contacts1Impl
 * @generated
 */
@JSON(strict = true)
public class Contacts1ModelImpl
	extends BaseModelImpl<Contacts1> implements Contacts1Model {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts1 model instance should use the <code>Contacts1</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yash_Contacts1";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"phoneId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"homePhone", Types.VARCHAR},
		{"mobilePhone", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yash_Contacts1 (uuid_ VARCHAR(75) null,phoneId LONG not null primary key,userId LONG,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Yash_Contacts1";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contacts1.phoneId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yash_Contacts1.phoneId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHONEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public Contacts1ModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _phoneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPhoneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _phoneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Contacts1.class;
	}

	@Override
	public String getModelClassName() {
		return Contacts1.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Contacts1, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Contacts1, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contacts1, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Contacts1)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Contacts1, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Contacts1, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Contacts1)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Contacts1, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Contacts1, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Contacts1, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Contacts1, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Contacts1, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Contacts1, Object>>();
		Map<String, BiConsumer<Contacts1, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Contacts1, ?>>();

		attributeGetterFunctions.put("uuid", Contacts1::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Contacts1, String>)Contacts1::setUuid);
		attributeGetterFunctions.put("phoneId", Contacts1::getPhoneId);
		attributeSetterBiConsumers.put(
			"phoneId", (BiConsumer<Contacts1, Long>)Contacts1::setPhoneId);
		attributeGetterFunctions.put("userId", Contacts1::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Contacts1, Long>)Contacts1::setUserId);
		attributeGetterFunctions.put("homePhone", Contacts1::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone",
			(BiConsumer<Contacts1, String>)Contacts1::setHomePhone);
		attributeGetterFunctions.put("mobilePhone", Contacts1::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<Contacts1, String>)Contacts1::setMobilePhone);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPhoneId() {
		return _phoneId;
	}

	@Override
	public void setPhoneId(long phoneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneId = phoneId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobilePhone = mobilePhone;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Contacts1.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Contacts1 toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Contacts1>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Contacts1Impl contacts1Impl = new Contacts1Impl();

		contacts1Impl.setUuid(getUuid());
		contacts1Impl.setPhoneId(getPhoneId());
		contacts1Impl.setUserId(getUserId());
		contacts1Impl.setHomePhone(getHomePhone());
		contacts1Impl.setMobilePhone(getMobilePhone());

		contacts1Impl.resetOriginalValues();

		return contacts1Impl;
	}

	@Override
	public Contacts1 cloneWithOriginalValues() {
		Contacts1Impl contacts1Impl = new Contacts1Impl();

		contacts1Impl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		contacts1Impl.setPhoneId(this.<Long>getColumnOriginalValue("phoneId"));
		contacts1Impl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		contacts1Impl.setHomePhone(
			this.<String>getColumnOriginalValue("homePhone"));
		contacts1Impl.setMobilePhone(
			this.<String>getColumnOriginalValue("mobilePhone"));

		return contacts1Impl;
	}

	@Override
	public int compareTo(Contacts1 contacts1) {
		long primaryKey = contacts1.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Contacts1)) {
			return false;
		}

		Contacts1 contacts1 = (Contacts1)object;

		long primaryKey = contacts1.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Contacts1> toCacheModel() {
		Contacts1CacheModel contacts1CacheModel = new Contacts1CacheModel();

		contacts1CacheModel.uuid = getUuid();

		String uuid = contacts1CacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contacts1CacheModel.uuid = null;
		}

		contacts1CacheModel.phoneId = getPhoneId();

		contacts1CacheModel.userId = getUserId();

		contacts1CacheModel.homePhone = getHomePhone();

		String homePhone = contacts1CacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			contacts1CacheModel.homePhone = null;
		}

		contacts1CacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = contacts1CacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			contacts1CacheModel.mobilePhone = null;
		}

		return contacts1CacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Contacts1, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Contacts1, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Contacts1, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Contacts1)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Contacts1>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Contacts1.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _phoneId;
	private long _userId;
	private String _homePhone;
	private String _mobilePhone;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Contacts1, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Contacts1)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("phoneId", _phoneId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("homePhone", _homePhone);
		_columnOriginalValues.put("mobilePhone", _mobilePhone);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("phoneId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("homePhone", 8L);

		columnBitmasks.put("mobilePhone", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Contacts1 _escapedModel;

}